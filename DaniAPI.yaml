openapi: "3.0.0"
info:
  title: SimpleService
  version: 1.0.0
  description: Simple recording service, built for testing.
paths:
  /:
    get:
      operationId: listVersionsv1
      summary: List API versions
      responses:
        '200':
          description: '200 response'
          content:
            application/json:
              examples: 
                foo:
                  value: {
                    "versions": [
                        {
                            "status": "CURRENT",
                            "updated": "2011-01-21T11:33:21Z",
                            "id": "v0.1",
                            "links": [
                                {
                                    "href": "http://127.0.0.1:8774/v1/",
                                    "rel": "self"
                                }
                            ]
                        }
                    ]
                  }
  /v1:
    get:
      operationId: getVersionDetailsv1
      summary: Show API version details
      responses:
        '200':
          description: '200 response'
          content:
            application/json: 
              examples:
                foo:
                  value: {
                    "version": {
                      "status": "CURRENT",
                      "updated": "2011-01-21T11:33:21Z",
                      "media-types": [
                          {
                              "base": "application/xml",
                              "type": "application/vnd.openstack.compute+xml;version=2"
                          },
                          {
                              "base": "application/json",
                              "type": "application/vnd.openstack.compute+json;version=2"
                          }
                      ],
                      "id": "v1.0",
                      "links": [
                          {
                              "href": "http://127.0.0.1:8774/v1/",
                              "rel": "self"
                          },
                          {
                              "href": "http://docs.openstack.org/api/openstack-compute/2/os-compute-devguide-2.pdf",
                              "type": "application/pdf",
                              "rel": "describedby"
                          },
                          {
                            "href": "http://docs.openstack.org/api/openstack-compute/2/wadl/os-compute-2.wadl",
                            "type": "application/vnd.sun.wadl+xml",
                            "rel": "describedby"
                          }
                      ]
                    }
                  }
  # ? Is this necessary?
  # /v1/auth:
  # /v1/auth/login:
  # /v1/auth/logout:
  /v1/start:
    post:
      summary: 'Start the Service'
      operationId: startService
      responses:
        '202':
          description: 'Accepted request'
        default:
          description: 'unexpected error'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/stop:
    post:
      summary: 'Stop the Service'
      operationId: stopService
      responses:
        '202':
          description: 'Accepted request'
        default:
          description: 'unexpected error'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/sync:
    get:
      summary: 'Provides a local high precision for sync purposes.'
      operationId: sync
      responses:
        '200':
          description: 'A high precision timestamp to help sync services.'
          content:
            application/json:
              examples: 
                foo:
                  value: {
                      "timestamp": "2020-03-21T11:33:21.123456Z"
                  }
  /v1/subscribeStatus:
    post:
      description: subscribes a client to receive Status updates from this service
      parameters:
        - name: callbackUrl
          in: query
          required: true
          description: |
            the location where status data will be sent.  Must be network accessible
            by the source server
          schema:
            type: string
            format: uri
            example: https://tonys-server.com
      responses:
        '201':
          description: subscription successfully created
          content:
            application/json:
              schema:
                description: subscription information
                required:
                  - subscriptionId
                properties:
                  subscriptionId:
                    description: this unique identifier allows management of the subscription
                    type: string
                    example: 2531329f-fb09-4ef7-887e-84e648214436
      callbacks:
        # the name `onData` is a convenience locator
        onData:
          # when data is sent, it will be sent to the `callbackUrl` provided
          # when making the subscription PLUS the suffix `/data`
          '{$request.query.callbackUrl}/data':
            post:
              requestBody:
                description: subscription payload
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        userData:
                          type: string
              responses:
                '202':
                  description: |
                    Your server implementation should return this HTTP status code
                    if the data was received successfully
                '204':
                  description: |
                    Your server should return this HTTP status code if no longer interested
                    in further updates
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
