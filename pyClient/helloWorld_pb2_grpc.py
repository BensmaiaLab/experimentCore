# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import helloWorld_pb2 as helloWorld__pb2


class helloRPCStub(object):
  """Defines the service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sendRequest = channel.unary_unary(
        '/helloRPC.helloRPC/sendRequest',
        request_serializer=helloWorld__pb2.helloRequest.SerializeToString,
        response_deserializer=helloWorld__pb2.helloReply.FromString,
        )


class helloRPCServicer(object):
  """Defines the service
  """

  def sendRequest(self, request, context):
    """Function invoked to send the request
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_helloRPCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sendRequest': grpc.unary_unary_rpc_method_handler(
          servicer.sendRequest,
          request_deserializer=helloWorld__pb2.helloRequest.FromString,
          response_serializer=helloWorld__pb2.helloReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'helloRPC.helloRPC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
