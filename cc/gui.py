#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Fri Aug  7 15:47:15 2020
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class CCFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CCFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((514, 384))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        self.fileMenu = wx.Menu()
        self.frame_menubar.doThingItem = self.fileMenu.Append(wx.ID_ANY, "DoThing", "\"Help string goes here for DoThing\"")
        self.Bind(wx.EVT_MENU, self.onDoThing, id=self.frame_menubar.doThingItem.GetId())
        self.frame_menubar.exitItem = self.fileMenu.Append(wx.ID_EXIT, "Quit", "\"Exit the application.\"")
        self.Bind(wx.EVT_MENU, self.onExit, id=wx.ID_EXIT)
        self.frame_menubar.Append(self.fileMenu, "&File")
        self.helpMenu = wx.Menu()
        item = self.helpMenu.Append(wx.ID_ANY, "&Help (Online)", "Access online help.")
        self.Bind(wx.EVT_MENU, self.onHelp, id=item.GetId())
        self.frame_menubar.aboutItem = self.helpMenu.Append(wx.ID_ABOUT, "About", "")
        self.Bind(wx.EVT_MENU, self.onAbout, id=wx.ID_ABOUT)
        self.frame_menubar.Append(self.helpMenu, "&Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.statusBar = self.CreateStatusBar(2)
        self.nameInputBox = wx.TextCtrl(self, wx.ID_ANY, "John Hancock")
        self.button1 = wx.Button(self, wx.ID_ANY, "Update Server")
        self.logText = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onPress, self.button1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CCFrame.__set_properties
        self.SetTitle("Control Client")
        self.SetBackgroundColour(wx.Colour(101, 101, 101))
        self.statusBar.SetStatusWidths([-1, -1])

        # statusbar fields
        statusBar_fields = ["statusBar", "stuff"]
        for i in range(len(statusBar_fields)):
            self.statusBar.SetStatusText(statusBar_fields[i], i)
        self.nameInputBox.SetToolTip("Enter your name here.")
        self.nameInputBox.SetFocus()
        self.button1.SetBackgroundColour(wx.Colour(166, 166, 166))
        self.logText.SetBackgroundColour(wx.Colour(81, 81, 81))
        self.logText.SetForegroundColour(wx.Colour(204, 204, 204))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CCFrame.__do_layout
        topSizer = wx.BoxSizer(wx.VERTICAL)
        logSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Logs"), wx.VERTICAL)
        nameInputSizer = wx.BoxSizer(wx.HORIZONTAL)
        nameInputSizer.Add(self.nameInputBox, 0, 0, 0)
        nameInputSizer.Add(self.button1, 0, 0, 0)
        topSizer.Add(nameInputSizer, 1, wx.ALL | wx.EXPAND, 5)
        logSizer.Add(self.logText, 1, wx.EXPAND, 0)
        topSizer.Add(logSizer, 1, wx.EXPAND, 0)
        self.SetSizer(topSizer)
        self.Layout()
        # end wxGlade

    def onDoThing(self, event):  # wxGlade: CCFrame.<event_handler>
        print("Event handler 'onDoThing' not implemented!")
        event.Skip()

    def onExit(self, event):  # wxGlade: CCFrame.<event_handler>
        print("Event handler 'onExit' not implemented!")
        event.Skip()

    def onHelp(self, event):  # wxGlade: CCFrame.<event_handler>
        print("Event handler 'onHelp' not implemented!")
        event.Skip()

    def onAbout(self, event):  # wxGlade: CCFrame.<event_handler>
        print("Event handler 'onAbout' not implemented!")
        event.Skip()

    def onPress(self, event):  # wxGlade: CCFrame.<event_handler>
        print("Event handler 'onPress' not implemented!")
        event.Skip()

# end of class CCFrame

class ControlClientApp(wx.App):
    def OnInit(self):
        self.ccframe = CCFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.ccframe)
        self.ccframe.Show()
        return True

# end of class ControlClientApp

if __name__ == "__main__":
    ccApp = ControlClientApp(0)
    ccApp.MainLoop()
